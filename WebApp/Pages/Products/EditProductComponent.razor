@page "/editproduct/{productId}"

@inject NavigationManager NavManager
@inject IAddProductUseCase AddProductUseCase
@inject IGetProductByIdUseCase GetProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject IViewCategoriesUseCase ViewCategoriesUseCase

<h3>Edit Product</h3>

@if (product != null)
{
    <EditForm Model="product" class="form-inline" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="product.Name" class="form-control" />
        </div>
        <div class="form-group">
            <label for="category">Category</label>
            <select class="form-select" @bind="product.CategoryId">
                <option value="0" selected></option>
                @foreach (var cat in categories)
                {
                    <option value="@cat.CategoryId">@cat.Name</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="product.Quantity" class="form-control" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" @bind-Value:format="F2" class="form-control" />
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public string ProductId { get; set; }
    private Product product;
    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        product = new();
        categories = ViewCategoriesUseCase.Execute();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (int.TryParse(this.ProductId, out int iProductId))
        {
            var updatedProduct = GetProductByIdUseCase.Execute(iProductId);
            this.product = new()
            {
                ProductId = updatedProduct.ProductId,
                CategoryId = updatedProduct.CategoryId,
                Name = updatedProduct.Name,
                Quantity = updatedProduct.Quantity,
                Price = updatedProduct.Price
            };
        }
    }

    private void OnValidSubmit()
    {
        EditProductUseCase.Execute(this.product);
        NavManager.NavigateTo("/products");
    }

    private void OnCancel()
    {
        NavManager.NavigateTo("/products");
    }
}
