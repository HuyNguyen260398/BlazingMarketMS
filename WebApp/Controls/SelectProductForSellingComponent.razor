@inject IViewCategoriesUseCase ViewCategoriesUseCase
@inject IViewProductsByCategoryId ViewProductsByCategoryId

<div class="form-group">
    <label for="category">Category</label>
    <select class="form-select" @bind="SelectedCategoryId">
        <option value="0" selected></option>
        @foreach (var cat in categories)
        {
            <option value="@cat.CategoryId">@cat.Name</option>
        }
    </select>
</div>
<br/>

@if (productsInCategory != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Quantity Left</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in productsInCategory)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Quantity</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Product> productsInCategory;

    private int selectedCategoryId;
    private int SelectedCategoryId 
    { 
        get { return selectedCategoryId; } 
        set 
        { 
            selectedCategoryId = value;
            productsInCategory = ViewProductsByCategoryId.Execute(value);
            StateHasChanged();
        } 
    }

    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        categories = ViewCategoriesUseCase.Execute();
    }
}
